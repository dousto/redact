% File: progression
% Author: Doug Stoeckmann (dousto@gmail.com)


% Initialize range atoms
#const finaltime = m-1.
time(0..finaltime-1).
chord(0..11).

% Don't play the same chord twice in a row
:- 2{playChord(C, I); playChord(C, I+1)}2, chord(C), time(I).

% Don't play more than one chord at the same time.
:- 2{playChord(CL, I) : chord(CL)}, time(I).
:- 2{playChord(CL, finaltime) : chord(CL)}.

1{playChord(0, I+1); playChord(2, I+1); playChord(4, I+1); playChord(5, I+1); playChord(7, I+1); playChord(9, I+1)}1 :- 1{playChord(0, I); playChord(9, I)}1, time(I).
1{playChord(7, I+1)}1 :- playChord(2, I), time(I).
1{playChord(9, I+1)}1 :- playChord(4, I), time(I).
1{playChord(0, I+1); playChord(7, I+1); playChord(9, I+1)}1 :- playChord(5, I), time(I).
1{playChord(0, I+1); playChord(9, I+1)}1 :- playChord(7, I), time(I).
%1{playChord(2, I+1)}1 :- playChord(9, I), time(I).

% Start with the root or six
1{playChord(0, 0); playChord(9, 0)}1.

% The final chord must be a 1, 4 (half-step 6),
% or 5 (half-step 8) (so when it repeats, it goes to 1)
:- not 1{playChord(0, finaltime); playChord(5, finaltime); playChord(7, finaltime)}1.
1{playChord(5, finaltime); playChord(7, finaltime); playChord(9, finaltime)}1 :- playChord(0, 0).
1{playChord(0, finaltime); playChord(4, finaltime); playChord(5, finaltime); playChord(7, finaltime)}1 :- playChord(9, 0).

%*
#show playChord/2.
*%
