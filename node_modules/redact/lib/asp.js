var spawn = require('child_process').spawn;

var ASP = {};

(function (exported) {
    var Clingo = function(config){
        if (!this) return new Solver(config);
        var c = config || {};
        this.command = c.command || 'clingo';
        this.MAX_ANSWER_SETS = 0;
    };

    Clingo.prototype.compute = function(vars) {
        if (!vars) throw new Error('No argument passed to Clingo compute()');
        lpFiles = vars.lpFiles;
        withAtoms = vars.withAtoms;
        varMap = vars.varMap;

        // Convert object of form {var1: val1, var2: val2} to 'var1=val1,var2=val2'
        var varMapString = '';
        if (varMap) {
            for (var varName in varMap) {
                varMapString += varName + '=' + varMap[varName] + ','
            }
            varMapString = varMapString.replace(/,$/, '');
        }

        // Set arguments for the gringo process
        var args = new Array();
        args.push(this.MAX_ANSWER_SETS);
        args.push('--verbose=0'); // Output only the answer sets
        args.push('-c ' + varMapString);
        args = args.concat(lpFiles);
        args.push('-'); // Tells gringo to read from stdin for additional input

        // Start the process
        var clingo = spawn(this.command, args);

        // Set up handlers for the process output
        var answerSet = new AnswerSet();
        var outputBuffer = '';
        clingo.stdout.setEncoding('utf8');
        clingo.stdout.on('data', function(data) {
            data = outputBuffer + data;
            var answers = data.split('\n');

            for (var i = 0; i < answers.length - 1; i++) {
                if (answers[i] !== 'SATISFIABLE') answerSet.addAnswer(answers[i].split(' '));
                outputBuffer = '';
            }
            outputBuffer += answers[answers.length - 1];
        });
        clingo.stdout.on('end', function() {
            answerSet.finalizeAnswers();
        });
//        clingo.on('close', function (code) {
//            console.log('child process exited with code ' + code);
//            console.log(answerSet.answers)
//        });

        if (withAtoms) {
            for (var i = 0; i < withAtoms.length; i++) {
                clingo.stdin.write(withAtoms[i] + '.');
            }
        }
        // Close the process input stream
        clingo.stdin.end();

        return answerSet;
    };

    var AnswerSet = function(answers) {
        if (!this) return new AnswerSet();
        this.answers = answers || new Array();
        this.onHandlers = {answer: [], answers: []};
    };

    AnswerSet.prototype.addAnswer = function(answer) {
        this.answers.push(answer);

        // Notify registered handlers
        if (Array.isArray(this.onHandlers.answer)) {
            for(var i = 0; i < this.onHandlers.answer.length; i++) {
                this.onHandlers.answer[i](answer);
            }
        }
    }

    AnswerSet.prototype.finalizeAnswers = function() {
        // Notify registered handlers
        if (Array.isArray(this.onHandlers.answers)) {
            for(var i = 0; i < this.onHandlers.answers.length; i++) {
                this.onHandlers.answers[i](this.answers);
            }
        }
    }

    AnswerSet.prototype.on = function(event, handler) {
        this.onHandlers[event].push(handler);

        return this;
    }

    exported.Clingo = Clingo;
    exported.AnswerSet = AnswerSet;
})(ASP);

module.exports = ASP;